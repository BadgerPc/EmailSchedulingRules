package com.strumenta.funnellang
dialect "java"

import com.strumenta.funnel.Email;
import com.strumenta.funnel.EmailSequence;
import com.strumenta.funnel.EmailScheduling
import com.strumenta.funnel.EmailScheduler;
import com.strumenta.funnel.Subscriber
import java.time.LocalDate;

global EmailScheduler scheduler;
global LocalDate day;

// Rules:
// Send certain emails only after sending x emails with interesting stuff
// Send certain emails on certain week days
// Send certain emails with certain interval
// Never re-send the same email
// Do not send certain emails to people who bought something
// Send certain emails to people who bought something
// Rules regarding a certain sequence
// Rules for emails that have to be sent within a certain date

rule "Continue sequence"
   when
      sequence : EmailSequence ()
      subscriber : Subscriber ( isInSequence(sequence) )

   then
      scheduler.schedule(sequence.getFirst(), subscriber, day, 4.0f, true);
end

rule "Start sequence"
   when
      sequence : EmailSequence ()
      subscriber : Subscriber ( !isInSequence(sequence) )

   then
      scheduler.schedule(sequence.getFirst(), subscriber, day, 2.0f);
end

rule "Prevent overloading"
   when
      scheduling : EmailScheduling( sending.subscriber.hasReceivedEmailsInLastDays(3, day), !blocked )

   then
      System.out.println("[Prevent overloading]");
      scheduler.block(scheduling);
end

rule "Block on holidays"
   when
      scheduling : EmailScheduling( sending.subscriber.isOnHolidays(scheduling.sending.date), !blocked )

   then
      System.out.println("[Block on holidays]");
      scheduler.block(scheduling);
end

rule "Precedence to time sensitive emails"
   when
      scheduling1 : EmailScheduling( timeSensitive == true, !blocked )
      scheduling2 : EmailScheduling( this != scheduling1,
                !blocked,
                sending.subscriber == scheduling1.sending.subscriber,
                sending.date == scheduling1.sending.date,
                timeSensitive == false)
   then
      System.out.println("[time sensitive emails]");
      scheduler.block(scheduling2);
end

rule "Precedence to higher priority emails"
  when
     scheduling1 : EmailScheduling( !blocked )
     scheduling2 : EmailScheduling( this != scheduling1,
               !blocked,
               sending.subscriber == scheduling1.sending.subscriber,
               sending.date == scheduling1.sending.date,
               timeSensitive == scheduling1.timeSensitive,
               importance < scheduling1.importance)

   then
      System.out.println("[higher priority emails]");
      scheduler.block(scheduling2);
end

rule "Limit to one email per day"
  when
     scheduling1 : EmailScheduling( blocked == false )
     scheduling2 : EmailScheduling( this != scheduling1,
               blocked == false,
               sending.subscriber == scheduling1.sending.subscriber,
               sending.date == scheduling1.sending.date,
               timeSensitive == scheduling1.timeSensitive,
               importance == scheduling1.importance,
               id > scheduling1.id)

   then
      System.out.println("[Limit to one email per day]");
      scheduler.block(scheduling2);
end

rule "Never resend same email"
  when
     scheduling : EmailScheduling( !blocked )
     subscriber : Subscriber( this == scheduling.sending.subscriber,
            hasReceived(scheduling.sending.email) )
   then
      scheduling.setBlocked(true);
end